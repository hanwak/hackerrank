link: https://www.hackerrank.com/challenges/binary-search-tree-lowest-common-ancestor/problem?h_r=internal-search
implement: binary search tree, preorder tranversal

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    
    int data;
    struct node *left;
    struct node *right;
  
};

struct node* insert( struct node* root, int data ) {
		
	if(root == NULL) {
	
        struct node* node = (struct node*)malloc(sizeof(struct node));

        node->data = data;

        node->left = NULL;
        node->right = NULL;
        return node;
	  
	} else {
      
		struct node* cur;
		
		if(data <= root->data) {
            cur = insert(root->left, data);
            root->left = cur;
		} else {
            cur = insert(root->right, data);
            root->right = cur;
		}
	
		return root;
	}
}

/* you only have to complete the function given below.  
node is defined as  

struct node {
    
    int data;
    struct node *left;
    struct node *right;
  
};

*/
struct node *lca( struct node *root, int v1, int v2 ) {
    //Define functions for checking the left and right subtree
    struct node *left_lca;
    struct node *right_lca;
    
    //check and return NULL if the tree is empty
    if (root==NULL)
        return NULL;
    //return this node if the one of the key present within this node
    if (root->data == v1 || root->data == v2) 
        return root; 
    
    //Tranverse to left subtree and then right subtree (Preorder Transversal)
    //Preorder transversal because the search starts from root tree and tranverse to         //left and then right subtree
    left_lca  = lca(root->left, v1, v2); 
    right_lca = lca(root->right, v1, v2); 

    //if both function return !NULL value, then this node is the lca
    if (left_lca && right_lca)  return root; 

    //if left function return !NULL, check the left subtree if its the lca, otherwise        //right subtree is the lca
    if (left_lca!=NULL)
        return left_lca;
    else   
        return right_lca;
}


int main() {
  
    struct node* root = NULL;
    
    int t;
    int data;

    scanf("%d", &t);

    while(t-- > 0) {
        scanf("%d", &data);
        root = insert(root, data);
    }
  	int v1;
  	int v2;
  
  	scanf("%d%d", &v1, &v2);
	struct node *ans = lca(root, v1, v2);
  	printf("%d", ans->data);
  	
    return 0;
}
